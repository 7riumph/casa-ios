0cb04f6a12249a52a20a2167f65c9bc8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _ReactNativeViewAttributes = _interopRequireDefault(require("../Components/View/ReactNativeViewAttributes"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return {
    validAttributes: _objectSpread(_objectSpread({}, _ReactNativeViewAttributes.default.UIView), {}, {
      isHighlighted: true,
      isPressable: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true,
      android_hyphenationFrequency: true
    }),
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
});
exports.NativeText = NativeText;
var NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return {
    validAttributes: _objectSpread(_objectSpread({}, _ReactNativeViewAttributes.default.UIView), {}, {
      isHighlighted: true,
      isPressable: true,
      maxFontSizeMultiplier: true
    }),
    uiViewClassName: 'RCTVirtualText'
  };
});
exports.NativeVirtualText = NativeVirtualText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsIl9jcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiTmF0aXZlVGV4dCIsImNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJSZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzIiwiVUlWaWV3IiwiaXNIaWdobGlnaHRlZCIsImlzUHJlc3NhYmxlIiwibnVtYmVyT2ZMaW5lcyIsImVsbGlwc2l6ZU1vZGUiLCJhbGxvd0ZvbnRTY2FsaW5nIiwibWF4Rm9udFNpemVNdWx0aXBsaWVyIiwiZGlzYWJsZWQiLCJzZWxlY3RhYmxlIiwic2VsZWN0aW9uQ29sb3IiLCJhZGp1c3RzRm9udFNpemVUb0ZpdCIsIm1pbmltdW1Gb250U2NhbGUiLCJ0ZXh0QnJlYWtTdHJhdGVneSIsIm9uVGV4dExheW91dCIsIm9uSW5saW5lVmlld0xheW91dCIsImRhdGFEZXRlY3RvclR5cGUiLCJhbmRyb2lkX2h5cGhlbmF0aW9uRnJlcXVlbmN5IiwiZGlyZWN0RXZlbnRUeXBlcyIsInRvcFRleHRMYXlvdXQiLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wSW5saW5lVmlld0xheW91dCIsInVpVmlld0NsYXNzTmFtZSIsImV4cG9ydHMiLCJOYXRpdmVWaXJ0dWFsVGV4dCIsImdsb2JhbCIsIlJOJEJyaWRnZWxlc3MiLCJVSU1hbmFnZXIiLCJoYXNWaWV3TWFuYWdlckNvbmZpZyJdLCJzb3VyY2VzIjpbIlRleHROYXRpdmVDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1JlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IHt0eXBlIEhvc3RDb21wb25lbnR9IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MgZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyc7XG5pbXBvcnQge3R5cGUgUHJvY2Vzc2VkQ29sb3JWYWx1ZX0gZnJvbSAnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InO1xuaW1wb3J0IHt0eXBlIFRleHRQcm9wc30gZnJvbSAnLi9UZXh0UHJvcHMnO1xuaW1wb3J0IHt0eXBlIFByZXNzRXZlbnR9IGZyb20gJy4uL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcblxudHlwZSBOYXRpdmVUZXh0UHJvcHMgPSAkUmVhZE9ubHk8e1xuICAuLi5UZXh0UHJvcHMsXG4gIGlzSGlnaGxpZ2h0ZWQ/OiA/Ym9vbGVhbixcbiAgc2VsZWN0aW9uQ29sb3I/OiA/UHJvY2Vzc2VkQ29sb3JWYWx1ZSxcbiAgb25DbGljaz86ID8oZXZlbnQ6IFByZXNzRXZlbnQpID0+IG1peGVkLFxuICAvLyBUaGlzIGlzIG9ubHkgbmVlZGVkIGZvciBwbGF0Zm9ybXMgdGhhdCBvcHRpbWl6ZSB0ZXh0IGhpdCB0ZXN0aW5nLCBlLmcuLFxuICAvLyByZWFjdC1uYXRpdmUtd2luZG93cy4gSXQgY2FuIGJlIHVzZWQgdG8gb25seSBoaXQgdGVzdCB2aXJ0dWFsIHRleHQgc3BhbnNcbiAgLy8gdGhhdCBoYXZlIHByZXNzYWJsZSBldmVudHMgYXR0YWNoZWQgdG8gdGhlbS5cbiAgaXNQcmVzc2FibGU/OiA/Ym9vbGVhbixcbn0+O1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVGV4dDogSG9zdENvbXBvbmVudDxOYXRpdmVUZXh0UHJvcHM+ID1cbiAgKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFRleHQnLCAoKSA9PiAoe1xuICAgIHZhbGlkQXR0cmlidXRlczoge1xuICAgICAgLi4uUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5VSVZpZXcsXG4gICAgICBpc0hpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaXNQcmVzc2FibGU6IHRydWUsXG4gICAgICBudW1iZXJPZkxpbmVzOiB0cnVlLFxuICAgICAgZWxsaXBzaXplTW9kZTogdHJ1ZSxcbiAgICAgIGFsbG93Rm9udFNjYWxpbmc6IHRydWUsXG4gICAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgICBzZWxlY3Rpb25Db2xvcjogdHJ1ZSxcbiAgICAgIGFkanVzdHNGb250U2l6ZVRvRml0OiB0cnVlLFxuICAgICAgbWluaW11bUZvbnRTY2FsZTogdHJ1ZSxcbiAgICAgIHRleHRCcmVha1N0cmF0ZWd5OiB0cnVlLFxuICAgICAgb25UZXh0TGF5b3V0OiB0cnVlLFxuICAgICAgb25JbmxpbmVWaWV3TGF5b3V0OiB0cnVlLFxuICAgICAgZGF0YURldGVjdG9yVHlwZTogdHJ1ZSxcbiAgICAgIGFuZHJvaWRfaHlwaGVuYXRpb25GcmVxdWVuY3k6IHRydWUsXG4gICAgfSxcbiAgICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgICB0b3BUZXh0TGF5b3V0OiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblRleHRMYXlvdXQnLFxuICAgICAgfSxcbiAgICAgIHRvcElubGluZVZpZXdMYXlvdXQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uSW5saW5lVmlld0xheW91dCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVGV4dCcsXG4gIH0pKTogYW55KTtcblxuZXhwb3J0IGNvbnN0IE5hdGl2ZVZpcnR1YWxUZXh0OiBIb3N0Q29tcG9uZW50PE5hdGl2ZVRleHRQcm9wcz4gPVxuICAhZ2xvYmFsLlJOJEJyaWRnZWxlc3MgJiYgIVVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZygnUkNUVmlydHVhbFRleHQnKVxuICAgID8gTmF0aXZlVGV4dFxuICAgIDogKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFZpcnR1YWxUZXh0JywgKCkgPT4gKHtcbiAgICAgICAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgLi4uUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5VSVZpZXcsXG4gICAgICAgICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgICAgICBpc1ByZXNzYWJsZTogdHJ1ZSxcbiAgICAgICAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHVpVmlld0NsYXNzTmFtZTogJ1JDVFZpcnR1YWxUZXh0Jyxc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